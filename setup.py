#!/usr/bin/python3

##  Лицензия LGPLv2.1  ##
##  Автор Евгений Е.Ю. ##
##  build 04032017     ##
import os
import re
import readline
import time
import subprocess
import threading
rulocale = open('/etc/locale.conf', 'w')
rulocale.write('LANG=\"ru_RU.UTF-8\"\n')
rulocale.close()
os.system("localedef -i ru_RU -f UTF-8 ru_RU.UTF-8")

##Проверка SELinux
if str(subprocess.check_output('/usr/sbin/getenforce', shell=False))[2:11]=='Enforcing':
	selinux = open('/etc/selinux/config', 'w')
	selinux.write('SELINUX=disabled\nSELINUXTYPE=targeted')
	selinux.close()
	print("Идёт подготовка системы!\n")
	print("*Отключение SELinux  [+]\n\n")
	print("###########################################\n")
	print("# Через 15 секунд система перезапустится. #\n")
	print("###########################################\n")
	def reboot():
		os.system("reboot")
	xreboot = threading.Timer(15.0, reboot)
	xreboot.start()
		
else:
	print('Данный скрипт поможет сконфигурировать CentOS 7 в качестве интернет шлюза. \n ВАЖНО: Скрипт должен быть запущен с правами Администратора(root) !!!\n\n')
	os.system("yum -y --nogpgcheck update")
	os.system("yum -y --nogpgcheck install epel-release")
	os.system("yum -y --nogpgcheck install yum-utils iproute net-tools wget unzip htop mc gpm")
	os.system("systemctl enable iptables")
	os.system("yum -y --nogpgcheck install iptables-services")
	sysctl = open('/etc/sysctl.conf', 'w')
	sysctl.write('net.ipv4.ip_forward = 1 \nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.conf.all.accept_redirects = 0 \nnet.ipv4.icmp_echo_ignore_all = 1')
	sysctl.close()
	os.system("sysctl -p")
	os.system("systemctl start iptables")
	os.system("iptables -Z")
	os.system("iptables -F")

	os.system("clear")
	print("\nУстановить Web сервер[nginx - HTTP2]?\n")
	web = input(" Ввод [y/n]: ")
	xweb = web.strip()
	if xweb == "y":
		mariadb = open('/etc/yum.repos.d/MariaDB.repo', 'w')
		mariadb.write('[mariadb]\n')
		mariadb.write('name = MariaDB\n')
		mariadb.write('baseurl = http://yum.mariadb.org/10.1/centos7-amd64\n')
		mariadb.write('gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\n')
		mariadb.write('gpgcheck=1\n')
		mariadb.close()
		os.system("yum -y --nogpgcheck install MariaDB-server MariaDB-client")
		nginxrepo = open('/etc/yum.repos.d/Nginx.repo', 'w')
		nginxrepo.write('[nginx]\n')
		nginxrepo.write('name = nginx\n')
		nginxrepo.write('baseurl=http://nginx.org/packages/centos/7/$basearch/\n')
		nginxrepo.write('gpgcheck=0\n')
		nginxrepo.write('enabled=1\n')
		nginxrepo.close()
		os.system("yum -y --nogpgcheck install nginx vsftpd haproxy")
		os.system("yum -y --nogpgcheck install http://rpms.remirepo.net/enterprise/remi-release-7.rpm")
		os.system("yum --enablerepo=remi --nogpgcheck -y update")
		os.system("yum --enablerepo=remi-php70 --nogpgcheck -y update")
		os.system("yum -y --nogpgcheck install php70-php-cli php70-php-fpm php70-php-common php70-php-json php70-runtime php70-php-mysqlnd php70-php-pecl-mysql php70-php-gd php70-php-mcrypt php70-php-snmp php70-php-mbstring php70-php-xmlrpc php70-php-tidy php70-php-opcache php70-php-pecl-sync php70-php-pecl-ssh2 php70-php-pecl-pdflib php70-php-pecl-oauth php70-php-pecl-memcache")
		
		print("\nВведите ip адрес на который будет отвечать web сервер\n")
		ipweb = input(" Адрес: ")
		xipweb = ipweb.strip()
		os.system("mkdir /etc/core/")
		os.system("mkdir /etc/my/")
		os.system("cp -R 404 /etc")
		os.system("cp 403.html /etc")
		nginxhttp2conf = open('/etc/nginx/nginx.conf', 'w')
		nginxhttp2conf.write('user root;\n')
		nginxhttp2conf.write('pid /run/nginx.pid;\n')
		nginxhttp2conf.write('events {\n')
		nginxhttp2conf.write('\tworker_connections 2048;\n')
		nginxhttp2conf.write('}\n')
		nginxhttp2conf.write('http {\n')
		nginxhttp2conf.write('\tinclude mime.types;\n')
		nginxhttp2conf.write('\tinclude /etc/nginx/conf.d/*.conf;\n')
		nginxhttp2conf.write('\tdefault_type application/octet-stream;\n\n')
		nginxhttp2conf.write('server {\n')
		nginxhttp2conf.write('\tlisten 443 ssl http2;\n')
		nginxhttp2conf.write("\tserver_name " + xipweb + ";\n")
		nginxhttp2conf.write('\troot /etc;\n\n')
		nginxhttp2conf.write('\tsendfile on;\n')
		nginxhttp2conf.write('\ttcp_nopush on;\n\n')
		nginxhttp2conf.write('\tgzip on;\n')
		nginxhttp2conf.write('\tgzip_static on;\n')
		nginxhttp2conf.write('\tgzip_http_version 1.1;\n')
		nginxhttp2conf.write('\tgzip_proxied expired no-cache no-store private auth;\n')
		nginxhttp2conf.write('\tgzip_vary on;\n')
		nginxhttp2conf.write('\tgzip_comp_level 9;\n')
		nginxhttp2conf.write('\tgzip_buffers 64 8k;\n')
		nginxhttp2conf.write('\tgzip_types image/jpeg image/png application/pdf text/css application/x-javascript;\n\n')
		nginxhttp2conf.write('\tlocation / {\n')
		nginxhttp2conf.write('\tindex index.html index.php;\n')
		nginxhttp2conf.write('\terror_page 403 /403.html;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation /my {\n')
		nginxhttp2conf.write('\tindex index.html index.php;\n'
		nginxhttp2conf.write('\terror_page 403 /403.html;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tssl on;\n')
		nginxhttp2conf.write('\tssl_session_timeout 1h;\n')
		nginxhttp2conf.write('\tssl_certificate /etc/nginx/pki/issued/server.crt;\n')
		nginxhttp2conf.write('\tssl_certificate_key /etc/nginx/pki/private/server.key;\n')
		nginxhttp2conf.write('\tssl_dhparam /etc/nginx/pki/dh.pem;\n')
		nginxhttp2conf.write('\tadd_header Strict-Transport-Security max-age=31536000;\n')
		nginxhttp2conf.write('\tssl_protocols TLSv1.2;\n')
		nginxhttp2conf.write('\tssl_prefer_server_ciphers on;\n')
		nginxhttp2conf.write('\tssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;\n\n')
		nginxhttp2conf.write('\tlocation ~ \.php$ {\n')
		nginxhttp2conf.write('\tinclude fastcgi_params;\n')
		nginxhttp2conf.write('\tfastcgi_pass 127.0.0.1:9000;\n')
		nginxhttp2conf.write('\tfastcgi_index index.php;\n')
		nginxhttp2conf.write('\tfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation ~* \.(png|png|jpg|tiff|pdf)$ {\n')
		nginxhttp2conf.write('\treturn 403;\n')
		nginxhttp2conf.write('\terror_page 403 /403.html;\n')
		nginxhttp2conf.write('\t}\n')
		nginxhttp2conf.write('\tlocation /nginx {\n')
		nginxhttp2conf.write('\tdeny all;\n')
		nginxhttp2conf.write('\treturn 404;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation /openvpn {\n')
		nginxhttp2conf.write('\tdeny all;\n')
		nginxhttp2conf.write('\treturn 404;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation ~ /shadow {\n')
		nginxhttp2conf.write('\tdeny all;\n')
		nginxhttp2conf.write('\treturn 404;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation ~ /passwd {\n')
		nginxhttp2conf.write('\tdeny all;\n')
		nginxhttp2conf.write('\treturn 404;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation /core {\n')
		nginxhttp2conf.write('\tdeny all;\n')
		nginxhttp2conf.write('\treturn 404;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('\tlocation /sysconfig {\n')
		nginxhttp2conf.write('\tdeny all;\n')
		nginxhttp2conf.write('\treturn 404;\n')
		nginxhttp2conf.write('\terror_page 404 /404;\n')
		nginxhttp2conf.write('\t}\n\n')
		nginxhttp2conf.write('}\n}')
		nginxhttp2conf.close()
		print("\nВведите ip адрес для доступа к админцентру!\n")
		allowip = input(" Адрес: ")
		xallowip = allowip.strip()
		allowlist = open('/etc/nginx/allow.list', 'w')
		allowlist.write('allow 127.0.0.1;\n')
		allowlist.write('allow ' + allowip + ';\n')
		allowlist.close()

		
		os.system("mkdir /var/www/")
		os.system("mkdir /var/www/default/")
		os.system("cp -R 404 /var/www/default/")
		os.system("cp 403.html /var/www/default/")
		nginxdefaultconf = open('/etc/nginx/conf.d/default.conf', 'w')
		nginxdefaultconf.write('server {\n')
		nginxdefaultconf.write('\tlisten 80;\n')
		nginxdefaultconf.write("\tserver_name " + xipweb + ";\n")
		nginxdefaultconf.write('\troot /var/www/default/;\n')
		nginxdefaultconf.write('\tresolver 8.8.8.8;\n\n')
		nginxdefaultconf.write('\tgzip on;\n')
		nginxdefaultconf.write('\tgzip_static on;\n')
		nginxdefaultconf.write('\tgzip_http_version 1.1;\n')
		nginxdefaultconf.write('\tgzip_proxied expired no-cache no-store private auth;\n')
		nginxdefaultconf.write('\tgzip_vary on;\n')
		nginxdefaultconf.write('\tgzip_comp_level 9;\n')
		nginxdefaultconf.write('\tgzip_buffers 64 8k;\n')
		nginxdefaultconf.write('\tgzip_types image/jpeg image/png application/pdf text/css application/x-javascript;\n\n')
		nginxdefaultconf.write('\tlocation / {\n')
		nginxdefaultconf.write('\tindex index.html index.php;\n')
		nginxdefaultconf.write('\t}\n\n')
		nginxdefaultconf.write('\tlocation /phpMyAdmin {\n')
		nginxdefaultconf.write('\tinclude allow.list;\n')
		nginxdefaultconf.write('\tdeny all;\n')
		nginxdefaultconf.write('\terror_page 403 /403.html;\n')
		nginxdefaultconf.write('\t}\n\n')
		nginxdefaultconf.write('\tlocation ~ /upload {\n')
		nginxdefaultconf.write('\tdeny all;\n')
		nginxdefaultconf.write('\treturn 404;\n')
		nginxdefaultconf.write('\terror_page 404 /404;\n')
		nginxdefaultconf.write('\t}\n\n')
		print('Включить поддержку NodeJS ?')
		nodejs = input("Ввод [y/n]: ")
		xnodejs = nodejs.strip()
		if xnodejs == "y":
			os.system("yum -y --nogpgcheck install nodejs")
			os.system("mkdir /var/www/default/apps/")
			os.system("mkdir /var/www/default/apps/NodeJS/")
			nginxdefaultconf.write('\tlocation ~ /apps/NodeJS/ {\n')
			nginxdefaultconf.write('\tproxy_set_header X-Real-IP $remote_addr;\n')
			nginxdefaultconf.write('\tproxy_set_header X-NginX-Proxy true;\n')
			nginxdefaultconf.write('\tproxy_pass http://localhost:3000;\n')
			nginxdefaultconf.write('\tproxy_redirect off;\n')
			nginxdefaultconf.write('\t}\n\n')
		nginxdefaultconf.write('\tlocation ~ \.php$ {\n')
		nginxdefaultconf.write('\tinclude fastcgi_params;\n')
		nginxdefaultconf.write('\tfastcgi_pass 127.0.0.1:9000;\n')
		nginxdefaultconf.write('\tfastcgi_index index.php;\n')
		nginxdefaultconf.write('\tfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n')
		nginxdefaultconf.write('\t}\n')
		nginxdefaultconf.write('}\n')
		nginxdefaultconf.close()
		
		
		nginxunit = open('/etc/systemd/system/nginx.service', 'w')
		nginxunit.write('[Unit]\n')
		nginxunit.write('Description=nginx - high performance web server\n')
		nginxunit.write('Documentation=http://nginx.org/en/docs/\n')
		nginxunit.write('After=network-online.target remote-fs.target nss-lookup.target\n')
		nginxunit.write('Wants=network-online.target\n\n')
		nginxunit.write('[Service]\n')
		nginxunit.write('Type=forking\n')
		nginxunit.write('ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf\n')
		nginxunit.write('ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf\n')
		nginxunit.write('ExecReload=/bin/kill -s HUP $MAINPID\n')
		nginxunit.write('ExecStop=/bin/kill -s QUIT $MAINPID\n\n')
		nginxunit.write('[Install]\n')
		nginxunit.write('WantedBy=multi-user.target\n')
		nginxunit.close()
		
		os.system("clear")
		print('Инициализация центра сертификатов')
		os.system("./easyrsa init-pki")
		os.system("./easyrsa build-ca")
		os.system("clear")
		print('Генерация сертификата сервера')
		os.system("./easyrsa gen-req server nopass")
		os.system("./easyrsa sign-req server server")
		os.system("./easyrsa gen-dh")
		os.system("cp -R pki /etc/nginx/")
		os.system("clear")
		
		vsftpd = open('/etc/vsftpd/vsftpd.conf', 'w')
		vsftpd.write('anonymous_enable=NO\n')
		vsftpd.write('local_enable=YES\n')
		vsftpd.write('write_enable=YES\n')
		vsftpd.write('local_umask=022\n')
		vsftpd.write('dirmessage_enable=YES\n')
		vsftpd.write('xferlog_enable=NO\n')
		vsftpd.write('connect_from_port_20=NO\n')
		vsftpd.write('xferlog_std_format=YES\n')
		vsftpd.write('async_abor_enable=YES\n')
		vsftpd.write('ascii_upload_enable=YES\n')
		vsftpd.write('ascii_download_enable=YES\n')
		vsftpd.write('listen=NO\n')
		vsftpd.write('listen_ipv6=YES\n')
		vsftpd.write('pam_service_name=vsftpd\n')
		vsftpd.write('userlist_enable=YES\n')
		vsftpd.write('tcp_wrappers=YES\n')
		vsftpd.close()
	
		print("\nДобавление пользователя для ftp.\n")
		ftpuser = input("Имя пользователя: ")
		xftpuser = ftpuser.strip()
		os.system("useradd -s /usr/sbin/nologin -d /var/www/ " + xftpuser)
		os.system("passwd " + xftpuser)
		os.system("wget https://files.phpmyadmin.net/phpMyAdmin/4.6.6/phpMyAdmin-4.6.6-all-languages.zip")
		os.system("unzip phpMyAdmin-4.6.6-all-languages.zip -d /var/www/default/")
		os.system("mv /var/www/default/phpMyAdmin-4.6.6-all-languages /var/www/default/phpMyAdmin")
		os.system("chown " + xftpuser + " -R /var/www/")
		os.system("chmod 775 -R /var/www/")
		os.system("systemctl enable nginx")
		os.system("systemctl start nginx")
		os.system("systemctl enable vsftpd")
		os.system("systemctl start vsftpd")
		os.system("systemctl enable php70-php-fpm")
		os.system("systemctl restart php70-php-fpm")
		os.system("systemctl enable mariadb")
		os.system("systemctl start mariadb")
		print("\nНастройка MySQL сервера:\n")
		os.system("mysql_secure_installation")
		os.system("systemctl restart mariadb")
	
		##openvpn 
		os.system("yum -y --nogpgcheck install openvpn")
		os.system("clear")
		print('Генерация сертификата клиента')
		os.system("./easyrsa gen-req user nopass")
		os.system("./easyrsa sign-req client user")
		os.system("./easyrsa gen-crl")
		os.system("cp -R pki /etc/openvpn/")
		os.system("openvpn --genkey --secret /etc/openvpn/pki/ta.key")
		os.system("clear")
		os.system("ifconfig -a")
		wan = input(" Введите внешний интерфейс: ")
		xwan = wan.strip()
		tun = open('/etc/openvpn/tun.conf', 'w')
		tun.write('mode server\n')
		tun.write('tls-server\n')
		tun.write('client-to-client\n')
		tun.write('port 9071\n')
		tun.write('proto tcp\n')
		tun.write('dev tun0\n')
		tun.write('tls-auth /etc/openvpn/pki/ta.key\n')
		tun.write('ca /etc/openvpn/pki/ca.crt\n')
		tun.write('cert /etc/openvpn/pki/issued/server.crt\n')
		tun.write('key /etc/openvpn/pki/private/server.key\n')
		tun.write('dh /etc/openvpn/pki/dh.pem\n')
		tun.write('server 10.12.1.0 255.255.255.0\n')
		tun.write('keepalive 10 120\n')
		tun.write('ifconfig-pool-persist ipp\n')
		tun.write('username-as-common-name\n')
		tun.write('client-cert-not-required\n')
		tun.write('auth-user-pass-verify /etc/openvpn/auth.php via-env\n')
		tun.write('script-security 3\n')
		tun.write('comp-lzo yes\n')
		tun.write('cipher AES-256-CBC\n')
		tun.write('auth SHA1\n')
		tun.write('verb 0\n')
		tun.close()
		
		print("\nВведите пароль от mysql\n")
		mysqlpasswd = input(" Пароль: ")
		xmysqlpasswd = mysqlpasswd.strip()
		os.system('mysql -u root --password=\"' + xmysqlpasswd + '\" --execute=\"create database openvpn\" ')
		os.system('mysql -u root --password=\"' + xmysqlpasswd + '\" openvpn < openvpn.sql')
		auth = open('/etc/openvpn/auth.php', 'w')
		auth.write('#!/usr/bin/php70-cgi\n')
		auth.write('<?php\n')
		auth.write('$dbhost = \"localhost\";\n')
		auth.write('$dbuser = \"root\";\n')
		auth.write('$dbpass = \"' + xmysqlpasswd + '\";\n')
		auth.write('$db = \"openvpn\";\n')
		auth.write('$mysqli = mysqli_connect($dbhost, $dbuser, $dbpass, $db);\n')
		auth.write('mysqli_set_charset($mysqli, \"cp1251\");\n')
		auth.write('$login = trim(getenv(\"username\"));\n')
		auth.write('$passwd = trim(getenv(\"password\"));\n')
		auth.write('$hashpasswd = hash('sha256', $passwd);\n')
		auth.write('$query = \"SELECT login, passwd FROM users WHERE login = \"$login\" AND passwd = \"$passwd\"\";\n')
		auth.write('$search = mysqli_query($mysqli, $query);\n')
		auth.write('$auth = mysqli_fetch_array($search, MYSQLI_ASSOC);\n')
		auth.write('if(isset($login) === $auth[\"login\"] && isset($hashpasswd) === $auth[\"passwd\"]){\nexit(0);\n}')
		auth.write('else {exit(1);}\n')
		auth.write('?>\n')
		auth.close()
		os.system('chmod +x /etc/openvpn/auth.php')
	
		##cert read
		fcert = open("/etc/openvpn/pki/issued/user.crt", "r")
		certread = fcert.readlines()
		certnum = len(certread)
		for certline in range(0, certnum):
			cd = certread[int(certline)]
			certctring = str(cd)
			if re.search("-----BEGIN\sCERTIFICATE-----", certctring):
				begincert = int(certline)
		fcert.close()

		##key read
		fkey = open("/etc/openvpn/pki/private/user.key", "r")
		keyread = fkey.readlines()
		keynum = len(keyread)
		for keyline in range(0, keynum):
			kd = keyread[int(keyline)]
			keystring = str(kd)
			if re.search("-----BEGIN\sPRIVATE\sKEY-----", keystring):
				beginkey = int(keyline)
		fkey.close()

		##ca cert
		fca = open("/etc/openvpn/pki/ca.crt", "r")
		caread = fca.readlines()
		canum = len(caread)
		for caline in range(0, canum):
			cad = caread[int(caline)]
			castring = str(cad)
			if re.search("-----BEGIN\sCERTIFICATE-----", castring):
				beginca = int(caline)
		fca.close()

		##tls key
		fta = open("/etc/openvpn/pki/ta.key", "r")
		taread = fta.readlines()
		tanum = len(taread)
		for taline in range(0, tanum):
			tad = taread[int(taline)]
			tastring = str(tad)
			if re.search("-----BEGIN\sOpenVPN\sStatic\skey\sV1-----", tastring):
				beginta = int(taline)
		fta.close()

		## write ovpn
		clientovpn = open("/etc/upload/user.ovpn", "w")
		clientovpn.write("client\n")
		clientovpn.write("tls-client\n")
		clientovpn.write("auth-user-pass\n")
		clientovpn.write("remote " + xipweb + "\n")
		clientovpn.write("port 9071\n")
		clientovpn.write("proto tcp\n")
		clientovpn.write("dev tun0\n")
		clientovpn.write("comp-lzo yes\n")
		clientovpn.write("persist-key\n")
		clientovpn.write("persist-tun\n")
		clientovpn.write("cipher AES-256-CBC\n")
		clientovpn.write("verb 0\n\n")

		clientovpn.write("<cert>\n")
		for wcertline in range(begincert, certnum):
			wcertline = int(wcertline)
			wcert = certread[wcertline]
			clientovpn.write(wcert)
		clientovpn.write("</cert>\n")

		clientovpn.write("<key>\n")
		for wkeyline in range(beginkey, keynum):
			wkeyline = int(wkeyline)
			wkey = keyread[wkeyline]
			clientovpn.write(wkey)
		clientovpn.write("</key>\n")

		clientovpn.write("<ca>\n")
		for wcaline in range(beginca, canum):
			wcaline = int(wcaline)
			wca = caread[wcaline]
			clientovpn.write(wca)
		clientovpn.write("</ca>\n")

		clientovpn.write("<tls-auth>\n")
		for wtaline in range(beginta, tanum):
			wtaline = int(wtaline)
			wta = taread[wtaline]
			clientovpn.write(wta)
		clientovpn.write("</tls-auth>\n")
		clientovpn.close()
		os.system("iptables -t nat -A POSTROUTING -o " + xwan + " -s 10.12.1.1/24 -j MASQUERADE")
			
	print("\n Установить dhcp сервер?\n")
	iscdhcp = input(" Ввод [y/n]: ")
	xiscdhcp = iscdhcp.strip()
	if xiscdhcp == "y":
		os.system("ifconfig -a")
		os.system("yum -y --nogpgcheck install dhcp bind")
		#Настройка локального интерфейса
		lan = input("LAN-нтерфейс: ")
		xlan = lan.strip()
		direadifcfg = "/etc/sysconfig/network-scripts/ifcfg-" + xlan
		fstaticlan = open(direadifcfg, "r")
		staticlanread = fstaticlan.readlines()
		staticlannum = len(staticlanread)
		for staticlanline in range(0, staticlannum):
			staticland = staticlanread[int(staticlanline)]
			staticlanstring = str(staticland)
			if re.search("UUID=\w", staticlanstring):
				uuid = int(staticlanline)
			if re.search("NAME=\w", staticlanstring):
				ifcfgname = int(staticlanline)
			if re.search("DEVICE=\w", staticlanstring):
				ifcfgdevice = int(staticlanline)
		fstaticlan.close()
		
		lanstaticip = input("IP-адрес: ")
		xlanstaticip = lanstaticip.strip()
		lanmask = input("Маска: ")
		xlanmask = lanmask.strip()
		dirwriteifcfg = open(direadifcfg, "w")
		dirwriteifcfg.write('TYPE=\"Ethernet\"\n')
		dirwriteifcfg.write('BOOTPROTO=\"static\"\n')
		dirwriteifcfg.write('DEFROUTE=\"yes\"\n')
		dirwriteifcfg.write(staticlanread[ifcfgname])
		dirwriteifcfg.write(staticlanread[ifcfgdevice])
		dirwriteifcfg.write('IPADDR=' + xlanstaticip)
		dirwriteifcfg.write('NETMASK=' + xlanmask)
		dirwriteifcfg.write(staticlanread[uuid])
		dirwriteifcfg.write('PEERDNS=\"yes\"')
		dirwriteifcfg.write('PEERROUTES=\"yes\"')
		dirwriteifcfg.write('ONBOOT=\"yes\"\n')
		dirwriteifcfg.close()
		
		domain = input("Домен: ")
		xdomain = domain.strip()
		dhcpconf = open('/etc/dhcp/dhcpd.conf', 'w')
		dhcpconf.write('ddns-update-style none;\n')
		dhcpconf.write('option domain-name \"' + xdomain + '\";\n')
		dhcpconf.write('default-lease-time 43200;\n')
		dhcpconf.write('max-lease-time 86400;\n')
		dhcpconf.write('log-facility local7;\n\n')
		dhcpconf.write('subnet ' + xlanstaticip + ' netmask ' + xlanmask + ' {\n')
		dhcpconf.write('range 192.168.0.1 192.168.0.254;\n')
		dhcpconf.write('option domain-name-servers 192.168.0.1;\n')
		dhcpconf.write('option routers ' + xlanstaticip + ';\n')
		dhcpconf.write('}\n\n')
		
		print("\tДобавление нового устройства.\n")
		print("\tВведите MAC-адрес вида:\n")
		print("\t1a:2b:3c:4d:5e:6f\n")
		mac = input("MAC: ")
		xmac = mac.strip()
		dhcpconf.write('host xteh {\n')
		dhcpconf.write('hardware ethernet ' + xmac + ';\n')
		
		print("\tВведите IP-адрес нового устройства.\n")
		tehip = input("IP: ")
		xtehip = tehip.strip()
		dhcpconf.write('fixed-address ' + xtehip + ';\n')
		dhcpconf.write('}\n')
		dhcpconf.close()
		
		dhcpsysconf = open('/etc/sysconfig/dhcpd', 'w')
		dhcpsysconf.write("DHCPDARGS=" + xlan + "\n")
		dhcpsysconf.close()
		
	print("\nУстановить CreateRepo?\n")
	crepo = input(" Ввод [y/n]: ")
	xcrepo = crepo.strip()
	if xcrepo == "y":
		os.system("yum -y --nogpgcheck install createrepo rpm-build rpm-build-libs gcc cmake")
	
	os.system("iptables-save > /etc/sysconfig/iptables")
	
	##socks5 = open("/etc/ssh/sshd_config", "w")
	##socks5.write('Protocol 2\n')
	##socks5.write('TCPKeepAlive yes\n')
	##socks5.close()
	##os.system("systemctl restart sshd")
	##os.system("ssh -g -f -N root@localhost -R 443:localhost:1080")
	print("\n Перезагрузить ПК?\n")
	finish = input(" Ввод [y/n]: ")
	xfinish = finish.strip()
	if xfinish == "y":
		print("###########################################\n")
		print("# Через 10 секунд система перезапустится. #\n")
		print("###########################################\n")
		def uprepare():
			os.system("reboot")
		ufinish = threading.Timer(10.0, uprepare)
		ufinish.start()